关于SDU_WebJoyStick
  SDU_WebJoyStick 是山东大学FourDays团队为基于Html5 websocket和DeviceAPI 提出的一种新的
  游戏方式的开发引擎。我们意在开发一种新的游戏方式，手机端只需要打开浏览器即可通过手机作为游戏手柄
  控制pc中的网页游戏，为了使开发更加简单，我们提供了对通信基于Node.js的封装，使您只需开启手柄端的
  设备信息监听，就可以在pc端像pc拥有手机的这些特性一样的直接基于html5标准开发，这只是一个初期版本
  功能还没有完善，可能问题多多，欢迎反馈。我们计划在现在的基础上增加一些UI控件，封装一些游戏开发用
  的常用工具来使您的开发变得简单。由于我们都只是大学生，出于学业原因，更新可能不定时，如果您有什么好的
  建议请email给我，多谢您宝贵的意见。

优势和特性
 易用：pc端开发可以像本身支持手机的这些特性一样直接开发（将来版本中会不断添加新的游戏引擎的封装，
     使得游戏的开发更加简单），手机端我们提供基本的UI控件和默认的模板，使得几乎可以不用做什么修改
    （目前UI库和模板还没有开发，我们会在以后不久的版本升级时候添加）
 模式：我们希望游戏不仅仅是只要PC端和手机端这样彼此独立的两种，我们希望它们之间有更多的交互，

为什么想要开发一款这样的引擎？
  我们发现，目前的PC游戏交互方式过于单一，游戏手柄必然会使得游戏体验感有很大提升，而且还可以创造出新的
  游戏品种。在目前手机游戏方面，也暴露出一些问题，首先是手机游戏屏幕太小，体验感可能要低些，pad相对于
  手机却又难于控制，而且大多游戏都只能一个人参与游戏，这使得大家都埋头玩游戏，手机虽然丰富了人们的空闲
  生活，但是却淡漠了人们之间的交流。所以我们也希望通过这个API，大家可以一起合作、竞争去完成游戏，不仅
  达到了娱乐效果，更增进了人们之间的交流。当然这些体验无法达到xbox，PS3一类专业游戏手柄的体验，但是，
  人人都有手机，却不是人人都会买PS3这样的专业游戏机。您说是吧。

Docs API：
  服务器端：基于Node.js，建议http服务器基于express，
  使用模块：
  var webjoystick = require('webjoystick');
  var server = webjoystick.createServer(configure);
  configure 参数会作为参数传给websocket，具体参数参见
  <https://github.com/Worlize/WebSocket-Node/wiki/Documentation>
  
  GameWatcher
  添加模板中public/javascripts/gamewatcher.js到你的游戏中。
     Constructor
     new GameWatcher(url);
      url 为你websocket服务器的url
     Methods
     connect();  连接到websocket服务器
     on(msg,func); 处理来自手柄的消息。
     func(data): data.uid---游戏手柄的id号。用于区分游戏手柄。
     data.gamedata-----来自游戏手柄的数据。
     vabrate(uid,ruler) 给制定uid手柄产生震动信号，震动规律由ruler指定。单位毫秒
     events
	connected--连接到服务器
	stop---游戏暂停，暂停信息由附加参数data给出 gamepadRemoved，游戏手柄掉线导致自动暂停，或者诗发送暂停信号的游戏手柄
	gamepadAdded-----新的游戏手柄加入 data，游戏手柄的uid号
	gamepadRemoved----游戏手柄离线，data，游戏手柄的uid号
	start---游戏开始信号 data，发送该信号的游戏手柄uid号
	deviceorientation-----重力与方向传感器信息， 同html5标准deviceorientation
	devicemotion-----加速度传感器信息，同html5标准devicemotion
  Gamepad
  添加模板中的public/javascripts/gamepad.js到你的手柄页面
  Constructor
   new Gamepad(url,uid);-----url,websocket服务器的url，uid，游戏手柄的uid号，可自己给定。用于和gamewatcher处理函数认证
   connect（），连接到websocket服务器
   sendMessage（msg,data);给游戏端传输信息，msg--信息标题，data-数据。//对应GameWatcher中on(msg,func)处理函数，
					//该处理函数func(data),data.uid为该手柄的uid号，data.gamedata为sendMessage中data变量
   start_devicemotion---启用手机加速度传感器
   stop_devicemotion---关闭手机加速度传感器监听
   start_deviceorientation----启用手机重力感应和方向传感器
   stop_deviceorientation----关闭手机重力传感器和方向传感器监听
   disable_vibrate----禁用震动
   on(event,func) 处理事件函数绑定
   events
   connected---连接到websocket服务器时触发
   vibrate---受到震动请求，默认开启震动
   
   