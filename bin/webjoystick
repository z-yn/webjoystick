#!/usr/bin/env node

/**
 * Module dependencies.
 */

var exec = require('child_process').exec
  , program = require('commander')
  , mkdirp = require('mkdirp')
  , pkg = require('../package.json')
  , version = pkg.version
  , os = require('os')
  , fs = require('fs')
  , m_path = require('path')
  , util = require("util");
  
/**
 *all optional args is to config express
 */

program
  .version(version)
  .option('-e, --example', 'deploy a example case')
  .parse(process.argv);
  
// Path to init project

var path = program.args.shift() || '.';

// end-of-line code

var eol = os.EOL

var template_path = '../template/'
if(program.example) template_path='../example/'


var CUR_DIR = process.cwd();
/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.error(str);
  process.exit(1);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Copy template files to project.
 *
 * @param {String} origin
 * @param {String} target
 */
function copy(origin, target) {
  if(!fs.existsSync(origin)) abort(origin + 'is not exist.');
  if(!fs.existsSync(target)) {
    mkdir(target);
    console.log('   \x1b[36mcreate\x1b[0m : ' + target);
  }
  fs.readdir(origin, function(err, datalist) {
    if(err) abort(FILEREAD_ERROR);
    for(var i = 0; i < datalist.length; i++) {
      var oCurrent = m_path.resolve(origin, datalist[i]);
      var tCurrent = m_path.resolve(target, datalist[i]);
      if(fs.statSync(oCurrent).isFile()) {
        fs.writeFileSync(tCurrent, fs.readFileSync(oCurrent, ''), '');
        console.log('   \x1b[36mcreate\x1b[0m : ' + tCurrent);
      } else if(fs.statSync(oCurrent).isDirectory()) copy(oCurrent, tCurrent);
    }
  });
};

/**
 * Prompt confirmation with the given `msg`.
 *
 * @param {String} msg
 * @param {Function} fn
 */
function confirm(msg, fn) {
  prompt(msg, function(val) {
    fn(/^ *y(es)?/i.test(val));
  });
};

/**
 * Prompt input with the given `msg` and callback `fn`.
 *
 * @param {String} msg
 * @param {Function} fn
 */
function prompt(msg, fn) {
  if(' ' == msg[msg.length - 1]) process.stdout.write(msg);
  else console.log(msg);
  process.stdin.setEncoding('ascii');
  process.stdin.once('data', function(data) {
    fn(data);
  }).resume();
};


// Generate application

(function createApplication(path) {
  emptyDirectory(path, function(empty){
    if (empty || program.force) {
      createApplicationAt(path);
    } else {
      program.confirm('destination is not empty, continue? ', function(ok){
        if (ok) {
          process.stdin.destroy();
          createApplicationAt(path);
        } else {
          abort('aborting');
        }
      });
    }
  });
})(path);

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */
function createApplicationAt(path) {
     console.log();
  process.on('exit', function(){
    console.log();
    console.log('   install dependencies:');
    if(program.example) 
	    console.log('     $ cd %s/GravityMaze && npm install', path);
    else 
	    console.log('     $ cd %s && npm install', path);
    console.log();
    console.log('   run the app:');
    console.log('     $ node app.js');
    console.log();
  });
  copy(m_path.join(__dirname, template_path), path);
  
}

